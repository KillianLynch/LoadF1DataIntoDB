import argparse
import logging
import time
import datetime

import requests
import xmltodict
import oracledb
from rich import print
from rich.logging import RichHandler
from rich_argparse import RichHelpFormatter
from rich.console import Console
from rich.traceback import install

console = Console(color_system='auto')
install()


def drop_table(cursor, table_name: str) -> None:
    try:
        cursor.execute(f"drop table {table_name} purge")
    except:
        # It's possible that the table doesn't exist.
        pass


def prepare_database(connection) -> None:
    with console.status("Setting up schema"):
        with connection.cursor() as cursor:
            # assume we connectin to Oracle Database 23c
            db_check = 'IF NOT EXISTS'
            json_type = 'JSON'
            # then check if that assumption is correct
            db_version = connection.version[0:2]
            if db_version == '19':
                db_check = ''
                json_type = 'VARCHAR2 (4000), CONSTRAINT ensure_json CHECK (podium IS JSON)'
            elif db_version == '21':
                db_check = ''
            # always drop the tables
            drop_table(cursor, 'driver_race_map')
            drop_table(cursor, 'driver')
            drop_table(cursor, 'team')
            drop_table(cursor, 'race')

            # create table to store data
            sql = f'''
            BEGIN
                  EXECUTE IMMEDIATE 'CREATE TABLE {db_check} team
                    (team_id    INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                     name       VARCHAR2(255) NOT NULL,
                     points     INTEGER NOT NULL,
                     season     INTEGER,
                     CONSTRAINT team_pk PRIMARY KEY(team_id))';

                  EXECUTE IMMEDIATE 'CREATE TABLE {db_check} driver
                    (driver_id  INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                     name       VARCHAR2(255) NOT NULL,
                     points     INTEGER NOT NULL,
                     team_id    INTEGER,
                     season     INTEGER,
                     CONSTRAINT driver_pk PRIMARY KEY(driver_id),
                     CONSTRAINT driver_fk FOREIGN KEY(team_id) REFERENCES team(team_id))';

                  EXECUTE IMMEDIATE 'CREATE TABLE {db_check} race
                    (race_id    INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                     name       VARCHAR2(255) NOT NULL,
                     laps       INTEGER NOT NULL,
                     race_date  DATE,
                     podium     {json_type},
                     CONSTRAINT race_pk PRIMARY KEY(race_id))';

                  EXECUTE IMMEDIATE 'CREATE TABLE {db_check} DRIVER_RACE_MAP
                    (driver_race_map_id INTEGER generated by default on null as identity constraint DRIVER_RACE_MAP_PK primary key,
                     race_id            INTEGER not null constraint DRIVER_RACE_MAP_FK1 references RACE,
                     driver_id          INTEGER not null constraint DRIVER_RACE_MAP_FK2 references DRIVER,
                     position           INTEGER)';

                END;'''
            cursor.execute(sql)
    console.print("[yellow]Schema setup completed[/yellow]")


def fetch_data(connection) -> None:
    drivers_map = {}

    teams = {}
    driver_seq = 1
    teams_id = 1

    with connection.cursor() as cursor:
        # Constructors
        for year in years:
            drivers_data_map = {}
            print(f"[magenta]Started retrieving F1 data for[/magenta] [cyan bold]{year}[/cyan bold]")
            with console.status("[yellow bold]Inserting constructors[/yellow bold]"):
                api_url = f'http://ergast.com/api/f1/{year}/constructors'
                response = requests.get(api_url)
                if response.status_code != 200:
                    print("[red][bold]Unable to ")
                constructors = xmltodict.parse(response.text)
                rows = []
                for constructor in constructors['MRData']['ConstructorTable']['Constructor']:
                    teams[constructor['Name']] = teams_id
                    rows.append((teams_id, constructor['Name'], 0, int(year)))
                    teams_id += 1
                cursor.executemany("INSERT INTO team VALUES(:teams_id, :name, :points, :season)", rows)
                connection.commit()
            print("[yellow]Inserted constructors[/yellow]")

            # Drivers
            with console.status("[yellow bold]Inserting drivers[/yellow bold]"):
                # Get all races for the year
                api_url = 'http://ergast.com/api/f1/current'
                response = requests.get(api_url)
                data = response.text
                d = xmltodict.parse(data)
                race_list = d['MRData']['RaceTable']['Race']
                for i, race in enumerate(race_list):
                    # Get a race each race
                    results_url = f"http://ergast.com/api/f1/{year}/{race['@round']}/results"
                    response = requests.get(results_url)
                    race_data = xmltodict.parse(response.text)
                    if race_data['MRData']['@total'] != "0":
                        drivers_url = f"http://ergast.com/api/f1/{year}/{race['@round']}/drivers"
                        response = requests.get(drivers_url)
                        drivers_data = xmltodict.parse(response.text)
                        for x in drivers_data['MRData']['DriverTable']['Driver']:
                            driver_id = x['@driverId']
                            api_url_driver = f'http://ergast.com/api/f1/{year}/drivers/{driver_id}/constructors'
                            driver_response = requests.get(api_url_driver)
                            constructor = xmltodict.parse(driver_response.text)
                            logging.debug(f"{driver_seq}, {x['GivenName']} {x['FamilyName']}, {constructor['MRData']['ConstructorTable']['Constructor']['Name']}")
                            _driver_seq = 0
                            if x['@driverId'] not in drivers_map:
                                logging.debug(f"{x['@driverId']} doesn't have an id, allocating {driver_seq}")
                                drivers_map[x['@driverId']] = driver_seq
                                _driver_seq = driver_seq
                                driver_seq += 1
                            else:
                                _driver_seq = drivers_map[x['@driverId']]

                            _constructors = constructor['MRData']['ConstructorTable']['Constructor']
                            # It's possible that a driver may have changed team mid-season. If so just take the last team they drove for
                            if type(_constructors) == list:
                                _constructor = _constructors[:-1][0]['Name']
                            else:
                                _constructor = _constructors['Name']

                            drivers_data_map[x['@driverId']] = (_driver_seq, x['GivenName'], x['FamilyName'], _constructor)

                rows = []
                for row in drivers_data_map.values():
                    rows.append((row[0], f"{row[1]} {row[2]}", 0, teams[row[3]], int(year)))
                cursor.executemany('INSERT INTO driver VALUES(:driver_id, :name, :points, :team_id, :season)', rows)
            console.print("[yellow]Drivers inserted[/yellow]")

            with console.status("[yellow bold]Inserting circuits[/yellow bold]"):
                api_url = 'http://ergast.com/api/f1/current'
                response = requests.get(api_url)

                data = response.text
                d = xmltodict.parse(data)
                a = d['MRData']['RaceTable']['Race']
                rows = []
                for x in a:
                    rows.append((x['@round'], x['RaceName'], 56, x['Date'], ''))
                cursor.executemany(
                    f"INSERT INTO race VALUES(:race_id, :name, :laps, to_date(:race_date, 'YYYY-MM-DD'), :podium)", rows)
            console.print("[yellow]Circuits inserted[/yellow]")

            with console.status("[yellow bold]Inserting results[/yellow bold]"):
                # Results
                api_url = 'http://ergast.com/api/f1/current'
                response = requests.get(api_url)

                data = response.text
                d = xmltodict.parse(data)
                race_list = d['MRData']['RaceTable']['Race']
                race_driver_map_seq = 1
                for i, race in enumerate(race_list):
                    results_url = f"http://ergast.com/api/f1/{year}/{race['@round']}/results"
                    response = requests.get(results_url)
                    race_data = xmltodict.parse(response.text)
                    if race_data['MRData']['@total'] != "0":
                        result_list = race_data['MRData']['RaceTable']['Race']['ResultsList']['Result']
                        rows = []
                        for rr in result_list:
                            rows.append((race_driver_map_seq, race['@round'], drivers_map[rr['Driver']['@driverId']],
                                         rr['@position']))
                            race_driver_map_seq += 1
                        cursor.executemany(
                            "INSERT INTO driver_race_map VALUES (:driver_race_map_id, :race_id, :driver_id, :position)",
                            rows)
            console.print("[yellow]Results inserted")

    connection.commit()


if __name__ == "__main__":
    print("[bold magenta]F1 Data Schema Setup[/bold magenta]")

    years = []

    parser = argparse.ArgumentParser(description='Load F1 data into database for a given year',
                                     formatter_class=RichHelpFormatter)
    parser.add_argument('-u', '--user', help='user/schema to insert data into', required=True)
    parser.add_argument('-p', '--password', help='password for user', required=True)
    parser.add_argument('-cs', '--connectstring', help='connectstring of target database', required=True)
    parser.add_argument('-y', '--year', help='years to populate database with (comma separated, no spaces)', required=False, default=argparse.SUPPRESS)
    parser.add_argument("--debug", help="enable debug", required=False, action="store_true")

    args = parser.parse_args()

    if args.debug:
        FORMAT = "%(message)s"
        logging.basicConfig(
            level="NOTSET", format=FORMAT, datefmt="[%X]", handlers=[RichHandler()]
        )
    log = logging.getLogger("rich")

    if 'year' not in args:
        years.append(datetime.date.today().year)
    else:
        years = args.year.split(',')

    start = time.time()

    connection = oracledb.connect(user=args.user, password=args.password, port=1522, dsn=args.connectstring)
    prepare_database(connection)
    fetch_data(connection)

    print("[magenta]F1 Data Loaded[/magenta]")
    print(f"[magenta]Finished in [/magenta][cyan]{time.time() - start:.2f} seconds[/cyan]")
