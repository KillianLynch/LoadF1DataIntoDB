import argparse
import time
import datetime

import requests
import xmltodict
import oracledb


def prepare_database(username: str, password: str, connectstring: str) -> None:
    print("Setting up database")
    with oracledb.connect(user=username, password=password, dsn=connectstring) as connection:
        with connection.cursor() as cursor:
            cursor.execute('''CREATE TABLE IF NOT EXISTS team 
            (team_id    INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
             name       VARCHAR2(255) NOT NULL UNIQUE,
             points     INTEGER NOT NULL,
             CONSTRAINT team_pk PRIMARY KEY(team_id))''')

            cursor.execute('''CREATE TABLE IF NOT EXISTS driver 
              (driver_id  INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
               name       VARCHAR2(255) NOT NULL UNIQUE,
               points     INTEGER NOT NULL,
               team_id    INTEGER,
               CONSTRAINT driver_pk PRIMARY KEY(driver_id),
               CONSTRAINT driver_fk FOREIGN KEY(team_id) REFERENCES team(team_id))''')

            cursor.execute('''CREATE TABLE IF NOT EXISTS race
              (race_id    INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
               name       VARCHAR2(255) NOT NULL UNIQUE,
               laps       INTEGER NOT NULL,
               race_date  DATE,
               podium     JSON,
               CONSTRAINT race_pk PRIMARY KEY(race_id))''')

            cursor.execute("truncate table driver_race_map")
            cursor.execute("truncate table race")
            cursor.execute("truncate table driver")
            cursor.execute("truncate table team")


def fetch_data(username: str, password: str, connectstring: str) -> None:
    drivers_map = {}
    drivers_data_map = {}
    teams = {}
    driver_seq = 0

    with oracledb.connect(user=username, password=password, dsn=connectstring) as connection:
        with connection.cursor() as cursor:
            # Constructors
            api_url = f'http://ergast.com/api/f1/{year}/constructors'
            response = requests.get(api_url)

            constructors = xmltodict.parse(response.text)
            for id, constructor in enumerate(constructors['MRData']['ConstructorTable']['Constructor']):
                cursor.execute("insert into team values(:team_id, :name, :points)", [id, constructor['Name'], 0])
                teams[constructor['Name']] = id
            connection.commit()
            print("Found constructors")

            # Drivers
            api_url = 'http://ergast.com/api/f1/current'
            response = requests.get(api_url)

            data = response.text
            d = xmltodict.parse(data)
            race_list = d['MRData']['RaceTable']['Race']
            for i, race in enumerate(race_list):
                results_url = f"http://ergast.com/api/f1/{year}/{race['@round']}/results"
                response = requests.get(results_url)
                race_data = xmltodict.parse(response.text)
                if race_data['MRData']['@total'] != "0":
                    drivers_url = f"http://ergast.com/api/f1/{year}/{race['@round']}/drivers"
                    response = requests.get(drivers_url)
                    drivers_data = xmltodict.parse(response.text)
                    for x in drivers_data['MRData']['DriverTable']['Driver']:
                        driver_id = x['@driverId']
                        api_url_driver = f'http://ergast.com/api/f1/{year}/drivers/{driver_id}/constructors'
                        driver_response = requests.get(api_url_driver)
                        constructor = xmltodict.parse(driver_response.text)
                        # print(f"{driver_seq}, {x['GivenName']} {x['FamilyName']}, {constructor['MRData']['ConstructorTable']['Constructor']['Name']}")
                        ds = 0
                        if x['@driverId'] not in drivers_map:
                            driver_seq += + 1
                            # print(f"{x['@driverId']} doesn't have an id, allocating {driver_seq}")
                            drivers_map[x['@driverId']] = driver_seq
                            ds = driver_seq
                        else:
                            ds = drivers_map[x['@driverId']]
                        drivers_data_map[x['@driverId']] = (ds, x['GivenName'], x['FamilyName'],
                                                            constructor['MRData']['ConstructorTable']['Constructor'][
                                                                'Name'])

            for row in drivers_data_map.values():
                cursor.execute('insert into driver values(:driver_id, :name, :points, :team_id)',
                               [row[0], f"{row[1]} {row[2]}", 0, teams[row[3]]])
            connection.commit()
            print("Drivers inserted")

            # Races & Circuits
            api_url = 'http://ergast.com/api/f1/current'
            response = requests.get(api_url)

            data = response.text
            d = xmltodict.parse(data)
            a = d['MRData']['RaceTable']['Race']
            for x in a:
                cursor.execute(
                    f"insert into race values(:race_id, :name, :laps, to_date(:race_date, 'YYYY-MM-DD'), :podium)",
                    [x['@round'], x['RaceName'], 56, x['Date'], ''])
            connection.commit()
            print("Races inserted")

            # Results

            api_url = 'http://ergast.com/api/f1/current'
            response = requests.get(api_url)

            data = response.text
            d = xmltodict.parse(data)
            race_list = d['MRData']['RaceTable']['Race']
            race_driver_map_seq = 1
            for i, race in enumerate(race_list):
                results_url = f"http://ergast.com/api/f1/{year}/{race['@round']}/results"
                response = requests.get(results_url)
                race_data = xmltodict.parse(response.text)
                if race_data['MRData']['@total'] != "0":
                    race_name = race_data['MRData']['RaceTable']['Race']['RaceName']
                    result_list = race_data['MRData']['RaceTable']['Race']['ResultsList']['Result']
                    for rr in result_list:
                        cursor.execute(
                            "insert into driver_race_map values (:driver_race_map_id, :race_id, :driver_id, :position)",
                            [race_driver_map_seq, race['@round'], drivers_map[rr['Driver']['@driverId']],
                             rr['@position']])
                        race_driver_map_seq += 1
            connection.commit()


if __name__ == "__main__":

    year = None

    parser = argparse.ArgumentParser(description='Load F1 data into database for a given year')
    parser.add_argument('-u', '--user', help='username', required=True)
    parser.add_argument('-p', '--password', help='password', required=True)
    parser.add_argument('-cs', '--connectstring', help='connectstring of target database', required=True)
    parser.add_argument('-y', '--year', help='the year to populate database with', required=False,
                        default=argparse.SUPPRESS)

    args = parser.parse_args()

    if 'year' not in args:
        year = datetime.date.today().year
    else:
        year = args.year

    start = time.time()
    print(f"Started retrieving F1 data for {year}")

    prepare_database(args.user, args.password, args.connectstring)
    fetch_data(args.user, args.password, args.connectstring)

    print("Results inserted")
    print(f"Finished in {time.time() - start:.2f} seconds")
